/*

This widget rounds corners.

*/

widget community.livecode.paulmcclernan.imagetester

	use com.livecode.canvas
	use com.livecode.widget
	use com.livecode.math

	metadata title is "Image Tester"
	metadata author is "Paul McClernan"
	metadata version is "1.0.0"
	metadata preferredSize is "150,150"
	--metadata svgicon is ""

	private variable mRadius            as Number
	private variable mRoundTopLeft      as Boolean
	private variable mRoundTopRight     as Boolean
	private variable mRoundBottomRight  as Boolean
	private variable mRoundBottomLeft   as Boolean
	private variable mImagePath         as String
	private variable mResizeQuality     as String

	private variable mPath              as Path
	private variable mImage             as optional Image
	private variable mPaint             as optional Paint

	property filename                   get mImagePath          set setImagePath
	property "radius"                   get mRadius             set setRadius
	property roundTopLeft               get mRoundTopLeft       set setRoundTopLeft
	property roundTopRight              get mRoundTopRight      set setRoundTopRight
	property roundBottomRight           get mRoundBottomRight   set setRoundBottomRight
	property roundBottomLeft            get mRoundBottomLeft    set setRoundBottomLeft
	property formattedWidth             get getImageWidth
	property formattedHeight            get getImageHeight
	property resizeQuality					get getResizeQuality    set setResizeQuality

	metadata filename.editor is "com.livecode.pi.file"

	metadata resizeQuality.editor is "com.livecode.pi.enum"
	metadata resizeQuality.options is "none,low,medium,high"
	metadata resizeQuality.default is "medium"

	metadata backgroundColor.editor is "com.livecode.pi.color"
	metadata backgroundColor.default is "255,0,0"
	metadata backgroundcolor.section is "Colors"

	private handler setRadius(in pRadius as Number)
		put max(pRadius, 0) into mRadius
		calculateShape()
		redraw all
	end handler

	private handler getResizeQuality() returns String
		return mResizeQuality
	end handler

	private handler setResizeQuality(in pQuality as String)
		if not ["none","low","medium","high"] contains [pQuality] then
			put "medium" into pQuality
		end if

		put pQuality into mResizeQuality
	end handler

	private handler setImagePath(in pPath as String)
		put pPath into mImagePath
		loadImage()
		redraw all
	end handler

	private handler getImageWidth() returns Integer
		if mImage is nothing then
			return 0
		else
			return the width of mImage
		end if
	end handler

	private handler getImageHeight() returns Integer
		if mImage is nothing then
			return 0
		else
			return the height of mImage
		end if
	end handler

	private handler setRoundTopLeft(in pBoolean as Boolean)
	  put pBoolean into mRoundTopLeft
	  calculateShape()
	  redraw all
	end handler

	private handler setRoundTopRight(in pBoolean as Boolean)
	  put pBoolean into mRoundTopRight
	  calculateShape()
	  redraw all
	end handler

	private handler setRoundBottomRight(in pBoolean as Boolean)
	  put pBoolean into mRoundBottomRight
	  calculateShape()
	  redraw all
	end handler

	private handler setRoundBottomLeft(in pBoolean as Boolean)
	  put pBoolean into mRoundBottomLeft
	  calculateShape()
	  redraw all
	end handler

	private variable mImageRotate as Number
	property imageRotate            get mImageRotate    set setImageRotate
		metadata imageRotate.default is "1"
			metadata imageRotate.editor is "com.livecode.pi.number"
	private handler setImageRotate(in pVar as Number)
	  put pVar into mImageRotate
	  redraw all
	end handler

	private variable mTransMatrixVarA as Number
	property transformMatrixVarA            get mTransMatrixVarA    set setTransformMatrixVarA
		metadata transformMatrixVarA.default is "1"
			metadata transformMatrixVarA.editor is "com.livecode.pi.number"
	private handler setTransformMatrixVarA(in pVar as Number)
	  put pVar into mTransMatrixVarA
	  redraw all
	end handler
	private variable mTransMatrixVarB as Number
	property transformMatrixVarB           get mTransMatrixVarB    set setTransformMatrixVarB
		metadata transformMatrixVarB.default is "0"
			metadata transformMatrixVarB.editor is "com.livecode.pi.number"
	private handler setTransformMatrixVarB(in pVar as Number)
	  put pVar into mTransMatrixVarB
	  redraw all
	end handler
	private variable mTransMatrixVarC as Number
	property transformMatrixVarC           get mTransMatrixVarC    set setTransformMatrixVarC
		metadata transformMatrixVarC.default is "0"
			metadata transformMatrixVarC.editor is "com.livecode.pi.number"
	private handler setTransformMatrixVarC(in pVar as Number)
	  put pVar into mTransMatrixVarC
	  redraw all
	end handler
	private variable mTransMatrixVarD as Number
	property transformMatrixVarD            get mTransMatrixVarD    set setTransformMatrixVarD
		metadata transformMatrixVarD.default is "1"
			metadata transformMatrixVarD.editor is "com.livecode.pi.number"
	private handler setTransformMatrixVarD(in pVar as Number)
	  put pVar into mTransMatrixVarD
	  redraw all
	end handler
	private variable mTransMatrixVarE as Number
	property transformMatrixVarE            get mTransMatrixVarE    set setTransformMatrixVarE
		metadata transformMatrixVarE.default is "0"
			metadata transformMatrixVarE.editor is "com.livecode.pi.number"
	private handler setTransformMatrixVarE(in pVar as Number)
	  put pVar into mTransMatrixVarE
	  redraw all
	end handler
	private variable mTransMatrixVarF as Number
	property transformMatrixVarF            get mTransMatrixVarF    set setTransformMatrixVarF
		metadata transformMatrixVarF.default is "0"
			metadata transformMatrixVarF.editor is "com.livecode.pi.number"
	private handler setTransformMatrixVarF(in pVar as Number)
	  put pVar into mTransMatrixVarF
	  redraw all
	end handler

	private variable mSkewVarA as Number
	property skewVarA            get mSkewVarA    set setSkewVarA
		metadata skewVarA.default is "0"
			metadata skewVarA.editor is "com.livecode.pi.number"
	private handler setSkewVarA(in pVar as Number)
	  put pVar into mSkewVarA
	  redraw all
	end handler
	private variable mSkewVarB as Number
	property skewVarB           get mSkewVarB    set setSkewVarB
		metadata skewVarB.default is "0"
			metadata skewVarB.editor is "com.livecode.pi.number"
	private handler setSkewVarB(in pVar as Number)
	  put pVar into mSkewVarB
	  redraw all
	end handler

	public handler OnCreate()
		put 15 into mRadius
		put the empty path into mPath
		put "" into mImagePath
		put true into mRoundTopLeft
		put true into mRoundTopRight
		put true into mRoundBottomRight
		put true into mRoundBottomLeft
		put "medium" into mResizeQuality
		put nothing into mImage
		put nothing into mPaint
		put 1 into mTransMatrixVarA
		put 0 into mTransMatrixVarB
		put 0 into mTransMatrixVarC
		put 1 into mTransMatrixVarD
		put 0 into mTransMatrixVarE
		put 0 into mTransMatrixVarF
		put 0 into mSkewVarA
		put 0 into mSkewVarB
		put 0 into mImageRotate
	end handler


	public handler OnSave(out rProperties as Array)
		put the empty array into rProperties

		put mRadius into rProperties["radius"]
		put mImagePath into rProperties["filename"]
		put mRoundTopLeft into rProperties["roundTopLeft"]
		put mRoundTopRight into rProperties["roundTopRight"]
		put mRoundBottomRight into rProperties["roundBottomRight"]
		put mRoundBottomLeft into rProperties["roundBottomLeft"]
		put mResizeQuality into rProperties["resizeQuality"]
	end handler


	public handler OnLoad(in pProperties as Array)
		put pProperties["radius"] into mRadius
		put pProperties["filename"] into mImagePath
		put pProperties["roundTopLeft"] into mRoundTopLeft
		put pProperties["roundTopRight"] into mRoundTopRight
		put pProperties["roundBottomRight"] into mRoundBottomRight
		put pProperties["roundBottomLeft"] into mRoundBottomLeft
		put pProperties["resizeQuality"] into mResizeQuality
	end handler


	public handler OnOpen()
		calculateShape()
		loadImage()
	end handler


	public handler OnGeometryChanged()
		calculateShape()
	end handler

	public handler OnMouseUp()
		if the mouse position is within my bounds then
			post "mouseUp" to my script object with [the click button formatted as string] -- formatint needed until dp-2
		else
			post "mouseRelease" to my script object with [the click button formatted as string] -- formatint needed until dp-2
		end if
	end handler


	public handler OnMouseCancel()
		post "mouseRelease" to my script object with [the click button formatted as string] -- formatint needed until dp-2
	end handler


	public handler OnMouseDown()
		post "mouseDown" to my script object with [the click button formatted as string]
	end handler


	private handler loadImage() returns nothing
		put nothing into mImage

		if mImagePath is not empty then
			put image from file mImagePath into mImage
		end if
	end handler

-- private handler createImagePaint() returns nothing
--	if mImage is not nothing then
--		put pattern with mImage into mPaint
--		scale mPaint by [my width/the width of mImage, my height/the height of mImage]
--	end if
-- end handler
private handler createImagePaint() returns nothing
	if mImage is not nothing then
		-- variable tImage
		-- put image from file "images/backgroundpattern.png" into tImage
		-- put pattern with mImage into mPaint
		put pattern with mImage rotated by mImageRotate into mPaint
		--- Set up the pattern transform
		-- put transform from matrix [0,2,-2,0,0,0] into tTransform
		-- Create a new pattern paint, applying a transform to the image
		-- put pattern with mImage transformed by tTransform into mPaint
		scale mPaint by [my width/the width of mImage, my height/the height of mImage]
		-- ScaleX, SkewX, TransX, SkewY, ScaleY, TransY, Persp0, Persp1, and Persp2.
		transform mPaint by transform with matrix [mTransMatrixVarA,mTransMatrixVarB,mTransMatrixVarC,mTransMatrixVarD,mTransMatrixVarE,mTransMatrixVarF]

		variable tTransform
		put the identity transform into tTransform
		--  Apply a skew to the transform
		skew tTransform by [mSkewVarA, mSkewVarB]
		-- transform mPaint with skew [1,0]
		transform mPaint by tTransform

	end if
end handler


	private handler calculateShape() returns nothing
		variable tRadius as Number

		put mRadius into tRadius
		put the empty path into mPath

		// Make sure radius doesn't exceed what is allowed based on widget height
		put min(tRadius, my height / 2) into tRadius

		// Begin a new subpath
		if mRoundTopLeft then
			move to point [0, tRadius] on mPath
			arc through point [0, 0] to point [tRadius, 0] with radius tRadius on mPath
		else
			move to point [0, 0] on mPath
		end if

		if mRoundTopRight then
			arc through point [my width, 0] to point [my width, tRadius] with radius tRadius on mPath
		else
			line to point [my width, 0] on mPath
		end if

		if mRoundBottomRight then
			arc through point [my width, my height] to point [my width - tRadius, my height] with radius tRadius on mPath
		else
			line to point [my width, my height] on mPath
		end if

		if mRoundBottomLeft then
			arc through point [0, my height] to point [0, tRadius] with radius tRadius on mPath
		else
			line to point [0, my height] on mPath
			line to point [0, tRadius] on mPath
		end if

		// Close the path with a line back to the starting point
		close path on mPath
	end handler

	----------
	-- called whenever LiveCode needs to redraw the widget
	public handler OnPaint()
		if mImage is not nothing then
			set the image resize quality of this canvas to mResizeQuality
			createImagePaint()
		else
			put my background paint into mPaint
		end if

		set the paint of this canvas to mPaint

		fill mPath on this canvas
	end handler


	public handler OnClose()

	end handler

end widget
